{"version":3,"file":"static/js/405.e523689a.chunk.js","mappings":"mRA4FA,UApEwB,WACtB,IAAMA,GAAWC,EAAAA,EAAAA,KAEjB,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAEQC,GAAUC,EAAAA,EAAAA,MAAVD,MAEFE,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,SAAU,IAEZC,SAAU,SAAAC,GAGHA,EAAOF,UAIdG,SAAS,WAAD,8BAAE,WAAOD,EAAQE,GAAf,8FACad,EACnBe,EAAAA,GAAAA,eAA8B,CAAEL,SAAUE,EAAOF,SAAUL,MAAAA,KAFrD,OACFW,EADE,OAKJD,EAAAA,GAAAA,eAAAA,SAAAA,MAA6CC,GAC/C,UAAIA,EAAOC,eAAX,OAAI,EAAgBC,OAClBJ,EAAcK,cAAc,WAAYH,EAAOC,QAAQC,OAGzDd,GAAa,GAVP,2CAAF,qDAAC,KAeX,OAAID,GACK,SAAC,KAAD,CAAUiB,GAAIC,EAAAA,EAAAA,SAIrB,SAAC,KAAD,CAAMC,WAAS,EAACC,eAAe,SAASC,MAAO,CAAEC,SAAU,SAA3D,UACE,SAAC,KAAD,CAAMC,MAAI,EAACH,eAAe,SAA1B,UACE,iBAAMV,SAAUN,EAAOoB,aAAvB,UACE,SAAC,IAAD,WACE,UAAC,IAAD,YACE,SAAC,IAAD,CAAYC,QAAQ,KAAKJ,MAAO,CAAEK,UAAW,SAAUC,OAAQ,UAA/D,kCAGA,SAAC,KAAD,gBACEC,MAAM,WACND,OAAO,SACPE,KAAK,YACDzB,EAAO0B,cAAc,aAJ3B,IAKEf,MAAOX,EAAO2B,QAAQxB,UAAYyB,QAAQ5B,EAAO6B,OAAO1B,UACxD2B,WAAY9B,EAAO2B,QAAQxB,UAAYH,EAAO6B,OAAO1B,aAEvD,cAAGc,MAAO,CAAEK,UAAW,UAAvB,4DAGA,SAAC,IAAD,CAAQG,KAAK,SAASJ,QAAQ,YAAYU,MAAM,UAAhD","sources":["pages/Auth/SetPassword/SetPassword.tsx"],"sourcesContent":["import React, { FC, useState } from 'react';\n\nimport {\n  Button,\n  FormControl,\n  FormGroup,\n  Grid,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { FormikHelpers, useFormik } from 'formik';\nimport { Navigate, useParams } from 'react-router-dom';\n\nimport { path } from '../../../enums/path';\nimport { useAppDispatch } from '../../../hooks/useAppDispatch';\nimport { allAuthActions } from '../../../store';\n\ntype FormikErrorType = {\n  password?: string;\n};\ntype FormikValuesType = {\n  password: string;\n};\n\nconst SetPassword: FC = () => {\n  const dispatch = useAppDispatch();\n\n  const [isCreated, setIsCreated] = useState(false);\n\n  const { token } = useParams();\n\n  const formik = useFormik({\n    initialValues: {\n      password: '',\n    },\n    validate: values => {\n      const errors: FormikErrorType = {};\n\n      if (!values.password) {\n        errors.password = 'Required';\n      }\n    },\n    onSubmit: async (values, formikHelpers: FormikHelpers<FormikValuesType>) => {\n      const action = await dispatch(\n        allAuthActions.setNewPassword({ password: values.password, token }),\n      );\n\n      if (allAuthActions.setNewPassword.rejected.match(action)) {\n        if (action.payload?.error) {\n          formikHelpers.setFieldError('password', action.payload.error);\n        }\n      } else {\n        setIsCreated(true);\n      }\n    },\n  });\n\n  if (isCreated) {\n    return <Navigate to={path.LOGIN} />;\n  }\n\n  return (\n    <Grid container justifyContent=\"center\" style={{ maxWidth: '250px' }}>\n      <Grid item justifyContent=\"center\">\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormGroup>\n              <Typography variant=\"h6\" style={{ alignSelf: 'center', margin: '16px 0' }}>\n                Create new password\n              </Typography>\n              <TextField\n                label=\"Password\"\n                margin=\"normal\"\n                type=\"password\"\n                {...formik.getFieldProps('password')}\n                error={formik.touched.password && Boolean(formik.errors.password)}\n                helperText={formik.touched.password && formik.errors.password}\n              />\n              <p style={{ alignSelf: 'center' }}>\n                Create a new password and try to loggin again\n              </p>\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Create new password\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default SetPassword;\n"],"names":["dispatch","useAppDispatch","useState","isCreated","setIsCreated","token","useParams","formik","useFormik","initialValues","password","validate","values","onSubmit","formikHelpers","allAuthActions","action","payload","error","setFieldError","to","path","container","justifyContent","style","maxWidth","item","handleSubmit","variant","alignSelf","margin","label","type","getFieldProps","touched","Boolean","errors","helperText","color"],"sourceRoot":""}