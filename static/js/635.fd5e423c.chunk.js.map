{"version":3,"file":"static/js/635.fd5e423c.chunk.js","mappings":"+PAOaA,EAAoC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC5CC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,SAACC,EAAA,GAAD,CAAMC,MAAI,EAACC,eAAe,SAA1B,UACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAAEC,UAAW,SAAUC,UAAW,QAAlE,0BAGA,UAACJ,EAAA,EAAD,CAAYE,MAAO,CAAEG,OAAQ,UAA7B,sDACiDZ,MAEjD,SAACa,EAAA,EAAD,CAAQL,QAAQ,YAAYM,MAAM,UAAUC,QAX1B,kBAAYd,EAASe,EAAAA,EAAAA,QAWvC,iC,qECOKC,EAAkC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAClDC,GAAWC,EAAAA,EAAAA,KAEXpB,GAAWC,EAAAA,EAAAA,MAIXoB,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbxB,MAAO,IAETyB,SAAU,SAAAC,GACR,IAAMC,EAA2B,GAQjC,OANKD,EAAO1B,MAEA,4CAA4C4B,KAAKF,EAAO1B,SAClE2B,EAAO3B,MAAQ,yBAFf2B,EAAO3B,MAAQ,WAKV2B,GAETE,SAAS,WAAD,8BAAE,WAAOH,EAAQI,GAAf,8FACaV,EAASW,EAAAA,GAAAA,aAA4BL,EAAO1B,QADzD,OACFgC,EADE,OAGJD,EAAAA,GAAAA,aAAAA,SAAAA,MAA2CC,GAC7C,UAAIA,EAAOC,eAAX,OAAI,EAAgBC,OAClBJ,EAAcK,cAAc,QAASH,EAAOC,QAAQC,QAGtDf,EAASO,EAAO1B,OAChBkB,KATM,2CAAF,qDAAC,KAcX,OACE,SAACf,EAAA,GAAD,CAAMC,MAAI,EAACC,eAAe,SAA1B,UACE,iBAAMwB,SAAUP,EAAOc,aAAvB,UACE,SAACC,EAAA,EAAD,WACE,UAAC/B,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAAEC,UAAW,SAAUE,OAAQ,UAA/D,oCAGA,SAAC0B,EAAA,GAAD,gBACEC,MAAM,QACN3B,OAAO,SACP4B,KAAK,SACDlB,EAAOmB,cAAc,UAJ3B,IAKEP,MAAOZ,EAAOoB,QAAQ1C,OAAS2C,QAAQrB,EAAOK,OAAO3B,OACrD4C,WAAYtB,EAAOoB,QAAQ1C,OAASsB,EAAOK,OAAO3B,UAEpD,cAAGS,MAAO,CAAEC,UAAW,UAAvB,iFAGA,SAACG,EAAA,EAAD,CAAQ2B,KAAK,SAAShC,QAAQ,YAAYM,MAAM,UAAhD,gCAGA,cAAGL,MAAO,CAAEC,UAAW,UAAvB,8CACA,SAACG,EAAA,EAAD,CAAQE,QAtDM,kBAAYd,EAASe,EAAAA,EAAAA,QAsDDR,QAAQ,OAA1C,qCCnDZ,EAxBmB,WACjB,IAAMqC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,kBAE/B,GAA4BC,EAAAA,EAAAA,WAAS,GAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOhD,EAAP,KAAcmB,EAAd,KAKA,OAAI0B,GACK,SAAC,KAAD,CAAUM,GAAInC,EAAAA,EAAAA,WAIrB,SAACb,EAAA,GAAD,CAAMiD,WAAS,EAAC/C,eAAe,SAASI,MAAO,CAAE4C,SAAU,SAA3D,SACGJ,GACC,SAAClD,EAAD,CAAYC,MAAOA,KAEnB,SAACiB,EAAD,CAAkBC,OAZE,kBAAYgC,GAAU,IAYG/B,SAX5B,SAACnB,GAAD,OAAyBmB,EAASnB","sources":["pages/Auth/Forgot/CheckEmail/CheckEmail.tsx","pages/Auth/Forgot/RecoveryPassword/RecoveryPassword.tsx","pages/Auth/Forgot/Forgot.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { Button, FormGroup, Grid, Typography } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\n\nimport { path } from '../../../../enums/path';\n\nexport const CheckEmail: FC<{ email: string }> = ({ email }) => {\n  const navigate = useNavigate();\n\n  const navigateToLogin = (): void => navigate(path.LOGIN);\n\n  return (\n    <Grid item justifyContent=\"center\">\n      <FormGroup>\n        <Typography variant=\"h6\" style={{ alignSelf: 'center', marginTop: '16px' }}>\n          Check Email\n        </Typography>\n        <Typography style={{ margin: '16px 0' }}>\n          We&quot;ve sent an Email with instructions to {email}\n        </Typography>\n        <Button variant=\"contained\" color=\"primary\" onClick={navigateToLogin}>\n          Back to login\n        </Button>\n      </FormGroup>\n    </Grid>\n  );\n};\n","import React, { FC } from 'react';\n\nimport {\n  Button,\n  FormControl,\n  FormGroup,\n  Grid,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { FormikHelpers, useFormik } from 'formik';\nimport { useNavigate } from 'react-router-dom';\n\nimport { path } from '../../../../enums/path';\nimport { useAppDispatch } from '../../../../hooks/useAppDispatch';\nimport { allAuthActions } from '../../../../store';\n\ntype ForgotErrorsType = {\n  email?: string;\n};\ntype FormikValuesType = {\n  email: string;\n};\ntype PropsType = {\n  toSend: () => void;\n  setEmail: (email: string) => void;\n};\n\nexport const RecoveryPassword: FC<PropsType> = ({ toSend, setEmail }) => {\n  const dispatch = useAppDispatch();\n\n  const navigate = useNavigate();\n\n  const navigateToLogin = (): void => navigate(path.LOGIN);\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n    },\n    validate: values => {\n      const errors: ForgotErrorsType = {};\n\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n\n      return errors;\n    },\n    onSubmit: async (values, formikHelpers: FormikHelpers<FormikValuesType>) => {\n      const action = await dispatch(allAuthActions.sendPassword(values.email));\n\n      if (allAuthActions.sendPassword.rejected.match(action)) {\n        if (action.payload?.error) {\n          formikHelpers.setFieldError('email', action.payload.error);\n        }\n      } else {\n        setEmail(values.email);\n        toSend();\n      }\n    },\n  });\n\n  return (\n    <Grid item justifyContent=\"center\">\n      <form onSubmit={formik.handleSubmit}>\n        <FormControl>\n          <FormGroup>\n            <Typography variant=\"h6\" style={{ alignSelf: 'center', margin: '16px 0' }}>\n              Forgot your password?\n            </Typography>\n            <TextField\n              label=\"Email\"\n              margin=\"normal\"\n              type=\"email\"\n              {...formik.getFieldProps('email')}\n              error={formik.touched.email && Boolean(formik.errors.email)}\n              helperText={formik.touched.email && formik.errors.email}\n            />\n            <p style={{ alignSelf: 'center' }}>\n              Enter your email address and we will send you further instructions\n            </p>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n              Send instructions\n            </Button>\n            <p style={{ alignSelf: 'center' }}>Did you remember your password?</p>\n            <Button onClick={navigateToLogin} variant=\"text\">\n              Try loggin in\n            </Button>\n          </FormGroup>\n        </FormControl>\n      </form>\n    </Grid>\n  );\n};\n","import React, { FC, useState } from 'react';\n\nimport { Grid } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { path } from '../../../enums/path';\nimport { authSelectors } from '../../../store';\n\nimport { CheckEmail } from './CheckEmail/CheckEmail';\nimport { RecoveryPassword } from './RecoveryPassword/RecoveryPassword';\n\nconst Forgot: FC = () => {\n  const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn);\n\n  const [isSend, setIsSend] = useState(false);\n  const [email, setEmail] = useState('');\n\n  const handleSendMessage = (): void => setIsSend(true);\n  const handleSetEmail = (email: string): void => setEmail(email);\n\n  if (isLoggedIn) {\n    return <Navigate to={path.PROFILE} />;\n  }\n\n  return (\n    <Grid container justifyContent=\"center\" style={{ maxWidth: '250px' }}>\n      {isSend ? (\n        <CheckEmail email={email} />\n      ) : (\n        <RecoveryPassword toSend={handleSendMessage} setEmail={handleSetEmail} />\n      )}\n    </Grid>\n  );\n};\n\nexport default Forgot;\n"],"names":["CheckEmail","email","navigate","useNavigate","Grid","item","justifyContent","FormGroup","Typography","variant","style","alignSelf","marginTop","margin","Button","color","onClick","path","RecoveryPassword","toSend","setEmail","dispatch","useAppDispatch","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","formikHelpers","allAuthActions","action","payload","error","setFieldError","handleSubmit","FormControl","TextField","label","type","getFieldProps","touched","Boolean","helperText","isLoggedIn","useSelector","authSelectors","useState","isSend","setIsSend","to","container","maxWidth"],"sourceRoot":""}