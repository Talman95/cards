{"version":3,"file":"static/js/638.c2ce61cc.chunk.js","mappings":"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","sources":["utils/smartRandom.ts","pages/Learn/CheckboxBlock/CheckboxBlock.tsx","pages/Learn/LearnList.tsx","../node_modules/@mui/icons-material/KeyboardBackspace.js"],"sourcesContent":["import { CardType } from '../types';\n\nconst VALUE = 6;\n\nexport const getCard = (cards: CardType[] | null): CardType | null => {\n  if (!cards) return null;\n\n  const sum = cards.reduce(\n    (acc, card) => acc + (VALUE - card.grade) * (VALUE - card.grade),\n    0,\n  );\n  const rand = Math.random() * sum;\n  const res = cards.reduce(\n    (acc: { sum: number; id: number }, card, i) => {\n      const newSum = acc.sum + (VALUE - card.grade) * (VALUE - card.grade);\n\n      return { sum: newSum, id: newSum < rand ? i : acc.id };\n    },\n    { sum: 0, id: -1 },\n  );\n\n  return cards[res.id + 1];\n};\n","import React, { FC } from 'react';\n\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n} from '@mui/material';\n\ntype CheckboxBlockType = {\n  grade: number | null;\n  handleChange: (grade: number) => void;\n};\n\nexport const CheckboxBlock: FC<CheckboxBlockType> = ({ grade, handleChange }) => {\n  const gradeList = [\n    { value: 1, name: 'Did not know' },\n    { value: 2, name: 'Forgot' },\n    { value: 3, name: 'A lot of thought' },\n    { value: 4, name: 'Confuced' },\n    { value: 5, name: 'Knew the answer' },\n  ];\n\n  return (\n    <FormControl sx={{ m: 3 }} component=\"fieldset\" variant=\"standard\" size=\"small\">\n      <FormLabel component=\"legend\">Rate yourself:</FormLabel>\n      <FormGroup>\n        {gradeList.map(gl => (\n          <FormControlLabel\n            key={gl.name}\n            control={\n              <Checkbox\n                checked={grade === gl.value}\n                onChange={() => handleChange(gl.value)}\n                name={gl.name}\n                size=\"small\"\n              />\n            }\n            label={gl.name}\n          />\n        ))}\n      </FormGroup>\n    </FormControl>\n  );\n};\n","import React, { FC, useEffect, useState } from 'react';\n\nimport KeyboardBackspaceIcon from '@mui/icons-material/KeyboardBackspace';\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CircularProgress,\n  IconButton,\n  styled,\n  Typography,\n} from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { path } from '../../enums/path';\nimport { useActions } from '../../hooks/useActions';\nimport { allLearnActions, learnSelectors, packsSelectors } from '../../store';\nimport { CardType } from '../../types';\nimport { getCard } from '../../utils/smartRandom';\n\nimport { CheckboxBlock } from './CheckboxBlock/CheckboxBlock';\n\nconst LearnList: FC = () => {\n  const navigate = useNavigate();\n\n  const { getLearnedCards, updateGradeCard } = useActions(allLearnActions);\n\n  const { cardsPack_id } = useParams<{ cardsPack_id?: string }>();\n\n  const cards = useSelector(learnSelectors.selectLearnedPack);\n  const isFetching = useSelector(learnSelectors.selectIsFetching);\n  const cardPack = useSelector(packsSelectors.selectCardPacks).find(\n    pack => pack._id === cardsPack_id,\n  );\n\n  const [currentCard, setCurrentCard] = useState<null | CardType>(null);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [grade, setGrade] = useState<null | number>(null);\n\n  useEffect(() => {\n    if (!cardsPack_id) return;\n\n    getLearnedCards(cardsPack_id);\n  }, [cardsPack_id]);\n\n  useEffect(() => {\n    setCurrentCard(getCard(cards));\n  }, [cards]);\n\n  useEffect(() => {\n    return () => {\n      setCurrentCard(null);\n    };\n  }, []);\n\n  const handleShowAnswer = (): void => setShowAnswer(true);\n\n  const handleNextClick = async (): Promise<void> => {\n    if (grade && currentCard) {\n      await updateGradeCard({ grade, card_id: currentCard._id });\n    } else {\n      await setCurrentCard(getCard(cards));\n    }\n\n    setShowAnswer(false);\n    setGrade(null);\n  };\n\n  const handleChangeGrade = (grade: number): void => {\n    setGrade(grade);\n  };\n\n  const navigateToPacksList = (): void => navigate(path.PACKS);\n\n  if (!currentCard || isFetching) {\n    return (\n      <div style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  return (\n    <LearnBox>\n      <Box alignSelf=\"start\">\n        <IconButton aria-label=\"delete\" size=\"small\" onClick={navigateToPacksList}>\n          <KeyboardBackspaceIcon fontSize=\"small\" />\n        </IconButton>\n      </Box>\n      <Typography variant=\"h6\" component=\"div\" align=\"center\" style={{ margin: 16 }}>\n        Learn {cardPack?.name}\n      </Typography>\n      <Card style={{ width: '100%' }}>\n        <CardContent>\n          <Typography style={{ marginBottom: '16px' }}>\n            <strong>Question:</strong> {currentCard.question}\n          </Typography>\n          <Typography color=\"text.secondary\" variant=\"body2\" align=\"center\">\n            Number of attempts to answer the question: {currentCard.shots}\n          </Typography>\n        </CardContent>\n        {showAnswer ? (\n          <CardContent>\n            <Typography>\n              <strong>Answer:</strong> {currentCard.answer}\n            </Typography>\n            <CheckboxBlock grade={grade} handleChange={handleChangeGrade} />\n            <CardActions>\n              <Button\n                size=\"small\"\n                fullWidth\n                onClick={handleNextClick}\n                variant=\"contained\"\n              >\n                Next\n              </Button>\n            </CardActions>\n          </CardContent>\n        ) : (\n          <CardContent>\n            <CardActions>\n              <Button\n                size=\"small\"\n                fullWidth\n                onClick={handleShowAnswer}\n                variant=\"contained\"\n              >\n                Show answer\n              </Button>\n            </CardActions>\n          </CardContent>\n        )}\n      </Card>\n    </LearnBox>\n  );\n};\n\nexport default LearnList;\n\nconst LearnBox = styled(Box)(({ theme }) => ({\n  width: 'calc(100vw - 50px)',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  [theme.breakpoints.up('sm')]: {\n    width: '500px',\n  },\n}));\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M21 11H6.83l3.58-3.59L9 6l-6 6 6 6 1.41-1.41L6.83 13H21z\"\n}), 'KeyboardBackspace');\n\nexports.default = _default;"],"names":["getCard","cards","sum","reduce","acc","card","grade","rand","Math","random","res","i","newSum","id","CheckboxBlock","handleChange","FormControl","sx","m","component","variant","size","FormLabel","FormGroup","value","name","map","gl","FormControlLabel","control","Checkbox","checked","onChange","label","navigate","useNavigate","useActions","allLearnActions","getLearnedCards","updateGradeCard","cardsPack_id","useParams","useSelector","learnSelectors","isFetching","cardPack","packsSelectors","find","pack","_id","useState","currentCard","setCurrentCard","showAnswer","setShowAnswer","setGrade","useEffect","handleNextClick","card_id","style","position","top","textAlign","width","CircularProgress","LearnBox","Box","alignSelf","IconButton","onClick","path","KeyboardBackspace","fontSize","Typography","align","margin","Card","CardContent","marginBottom","question","color","shots","answer","CardActions","Button","fullWidth","styled","theme","display","flexDirection","alignItems","breakpoints","up","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}