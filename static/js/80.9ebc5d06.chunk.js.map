{"version":3,"file":"static/js/80.9ebc5d06.chunk.js","mappings":"8PAgIA,UAxGqB,WACnB,IAAMA,GAAWC,EAAAA,EAAAA,MAEjB,GAAkCC,EAAAA,EAAAA,GAAWC,EAAAA,IAArCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SAEfC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,kBACzBC,GAAeF,EAAAA,EAAAA,IAAYC,EAAAA,GAAAA,qBAEjCE,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLN,GAAY,MAEb,IAEH,IAEMO,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,cAAe,IAEjBC,SAAU,SAAAC,GACR,IAAMC,EAA0B,GAgBhC,OAdKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAClEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIZI,EAAOH,WACVI,EAAOJ,SAAW,YAEfG,EAAOF,cAEDE,EAAOH,WAAaG,EAAOF,gBACpCG,EAAOH,cAAgB,4CAFvBG,EAAOH,cAAgB,WAKlBG,GAETE,SAAU,SAAAH,GACRb,EAAS,CAAES,MAAOI,EAAOJ,MAAOC,SAAUG,EAAOH,cAIrD,OAAIN,GACK,SAAC,KAAD,CAAUa,GAAIC,EAAAA,EAAAA,QAEnBjB,GACK,SAAC,KAAD,CAAUgB,GAAIC,EAAAA,EAAAA,WAIrB,SAAC,KAAD,CAAMC,WAAS,EAACC,eAAe,SAASC,MAAO,CAAEC,MAAO,SAAxD,UACE,SAAC,KAAD,CAAMC,MAAI,EAACH,eAAe,SAA1B,UACE,iBAAMJ,SAAUV,EAAOkB,aAAvB,UACE,SAAC,IAAD,WACE,UAAC,IAAD,YACE,SAAC,IAAD,CAAYC,QAAQ,KAAKJ,MAAO,CAAEK,UAAW,SAAUC,OAAQ,UAA/D,sBAGA,SAAC,KAAD,gBACEC,MAAM,mBACND,OAAO,SACPE,KAAK,SACDvB,EAAOwB,cAAc,UAJ3B,IAKEC,MAAOzB,EAAO0B,QAAQvB,OAASwB,QAAQ3B,EAAOQ,OAAOL,OACrDyB,WAAY5B,EAAO0B,QAAQvB,OAASH,EAAOQ,OAAOL,UAEpD,SAAC,KAAD,gBACEmB,MAAM,sBACND,OAAO,SACPE,KAAK,YACDvB,EAAOwB,cAAc,aAJ3B,IAKEC,MAAOzB,EAAO0B,QAAQtB,UAAYuB,QAAQ3B,EAAOQ,OAAOJ,UACxDwB,WAAY5B,EAAO0B,QAAQtB,UAAYJ,EAAOQ,OAAOJ,aAEvD,SAAC,KAAD,gBACEkB,MAAM,wBACND,OAAO,SACPE,KAAK,YACDvB,EAAOwB,cAAc,kBAJ3B,IAKEC,MACEzB,EAAO0B,QAAQrB,eAAiBsB,QAAQ3B,EAAOQ,OAAOH,eAExDuB,WAAY5B,EAAO0B,QAAQrB,eAAiBL,EAAOQ,OAAOH,cAC1DU,MAAO,CAAEc,aAAc,YAEzB,SAAC,IAAD,CAAQN,KAAK,SAASJ,QAAQ,YAAYW,MAAM,UAAhD,sBAGA,cAAGf,MAAO,CAAEK,UAAW,UAAvB,uCACA,SAAC,IAAD,CAAQW,QA/EI,kBAAY1C,EAASuB,EAAAA,EAAAA,QA+ECO,QAAQ,OAA1C","sources":["pages/Auth/Register/Register.tsx"],"sourcesContent":["import React, { FC, useEffect } from 'react';\n\nimport {\n  Button,\n  FormControl,\n  FormGroup,\n  Grid,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { useFormik } from 'formik';\nimport { useSelector } from 'react-redux';\nimport { Navigate, useNavigate } from 'react-router-dom';\n\nimport { path } from '../../../enums/path';\nimport { useActions } from '../../../hooks/useActions';\nimport { allAuthActions, authSelectors } from '../../../store';\n\ntype FormikErrorType = {\n  email?: string;\n  password?: string;\n  confirmedPass?: string;\n};\n\nconst Register: FC = () => {\n  const navigate = useNavigate();\n\n  const { setRegister, register } = useActions(allAuthActions);\n\n  const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn);\n  const isRegistered = useSelector(authSelectors.selectIsRegistered);\n\n  useEffect(() => {\n    return () => {\n      setRegister(false);\n    };\n  }, []);\n\n  const navigateToLogin = (): void => navigate(path.LOGIN);\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      confirmedPass: '',\n    },\n    validate: values => {\n      const errors: FormikErrorType = {};\n\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n      if (!values.password) {\n        errors.password = 'Required';\n      }\n      if (!values.confirmedPass) {\n        errors.confirmedPass = 'Required';\n      } else if (values.password !== values.confirmedPass) {\n        errors.confirmedPass = 'The password confirmation does not match';\n      }\n\n      return errors;\n    },\n    onSubmit: values => {\n      register({ email: values.email, password: values.password });\n    },\n  });\n\n  if (isRegistered) {\n    return <Navigate to={path.LOGIN} />;\n  }\n  if (isLoggedIn) {\n    return <Navigate to={path.PROFILE} />;\n  }\n\n  return (\n    <Grid container justifyContent=\"center\" style={{ width: '300px' }}>\n      <Grid item justifyContent=\"center\">\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormGroup>\n              <Typography variant=\"h6\" style={{ alignSelf: 'center', margin: '16px 0' }}>\n                Sign Up\n              </Typography>\n              <TextField\n                label=\"Enter your email\"\n                margin=\"normal\"\n                type=\"email\"\n                {...formik.getFieldProps('email')}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}\n              />\n              <TextField\n                label=\"Enter your password\"\n                margin=\"normal\"\n                type=\"password\"\n                {...formik.getFieldProps('password')}\n                error={formik.touched.password && Boolean(formik.errors.password)}\n                helperText={formik.touched.password && formik.errors.password}\n              />\n              <TextField\n                label=\"Confirm your password\"\n                margin=\"normal\"\n                type=\"password\"\n                {...formik.getFieldProps('confirmedPass')}\n                error={\n                  formik.touched.confirmedPass && Boolean(formik.errors.confirmedPass)\n                }\n                helperText={formik.touched.confirmedPass && formik.errors.confirmedPass}\n                style={{ marginBottom: '25px' }}\n              />\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Sign Up\n              </Button>\n              <p style={{ alignSelf: 'center' }}>Already have an account?</p>\n              <Button onClick={navigateToLogin} variant=\"text\">\n                Sign In\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Register;\n"],"names":["navigate","useNavigate","useActions","allAuthActions","setRegister","register","isLoggedIn","useSelector","authSelectors","isRegistered","useEffect","formik","useFormik","initialValues","email","password","confirmedPass","validate","values","errors","test","onSubmit","to","path","container","justifyContent","style","width","item","handleSubmit","variant","alignSelf","margin","label","type","getFieldProps","error","touched","Boolean","helperText","marginBottom","color","onClick"],"sourceRoot":""}