{"version":3,"file":"static/js/818.ca85db35.chunk.js","mappings":"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","sources":["pages/Cards/CardsListHeader/ActionMenu/ActionMenu.tsx","pages/Cards/CardsListHeader/CardsListHeader.tsx","pages/Cards/SearchBlock/SearchBlock.tsx","pages/Cards/TableBlock/CustomCardRow/CustomCardRow.tsx","pages/Cards/TableBlock/TableHeader/TableHeader.tsx","pages/Cards/TableBlock/TableBlock.tsx","pages/Cards/CardsList.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport SchoolIcon from '@mui/icons-material/School';\nimport { IconButton, Stack } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport { cardsSelectors } from '../../../../store';\n\ntype PropsType = {\n  blocked: boolean;\n  showUpdateModal: () => void;\n  showDeleteModal: () => void;\n  closeTooltip: () => void;\n};\n\nexport const ActionMenu: FC<PropsType> = ({\n  blocked,\n  showUpdateModal,\n  showDeleteModal,\n  closeTooltip,\n}) => {\n  const navigate = useNavigate();\n\n  const cardsPack_id = useSelector(cardsSelectors.selectCardsPack_id);\n\n  const onLearnPackClick = (): void => {\n    closeTooltip();\n    navigate(`/learn/${cardsPack_id}`);\n  };\n  const onUpdatePackClick = (): void => {\n    closeTooltip();\n    showUpdateModal();\n  };\n  const onDeletePackClick = (): void => {\n    closeTooltip();\n    showDeleteModal();\n  };\n\n  return (\n    <Stack direction=\"column\" alignItems=\"flex-start\" justifyContent=\"center\" spacing={1}>\n      <IconButton size=\"small\" onClick={onLearnPackClick} disabled={blocked}>\n        <SchoolIcon fontSize=\"small\" />\n      </IconButton>\n      <IconButton size=\"small\" onClick={onUpdatePackClick}>\n        <EditIcon fontSize=\"small\" />\n      </IconButton>\n      <IconButton size=\"small\" onClick={onDeletePackClick}>\n        <DeleteIcon fontSize=\"small\" />\n      </IconButton>\n    </Stack>\n  );\n};\n","import React, { FC, useState } from 'react';\n\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport KeyboardBackspaceIcon from '@mui/icons-material/KeyboardBackspace';\nimport {\n  Box,\n  Button,\n  IconButton,\n  styled,\n  Tooltip,\n  tooltipClasses,\n  TooltipProps,\n  Typography,\n} from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport { AddCardType, UpdatePackType } from '../../../api';\nimport { modalType } from '../../../enums/modalType';\nimport { useActions } from '../../../hooks/useActions';\nimport {\n  allModalActions,\n  cardsSelectors,\n  profileSelectors,\n  appSelectors,\n  packsSelectors,\n} from '../../../store';\nimport { DeleteModalType } from '../../../store/slices/modalSlice';\n\nimport { ActionMenu } from './ActionMenu/ActionMenu';\n\ntype PropsType = {\n  cardsPackId: string;\n  length: number;\n};\n\nexport const CardsListHeader: FC<PropsType> = ({ cardsPackId, length }) => {\n  const { setModalOpen } = useActions(allModalActions);\n\n  const navigate = useNavigate();\n\n  const packUserId = useSelector(cardsSelectors.selectPackUserId);\n  const userId = useSelector(profileSelectors.selectProfile)?._id;\n  const packName = useSelector(cardsSelectors.selectPackName);\n  const status = useSelector(appSelectors.selectStatus);\n  const packDeckCover = useSelector(cardsSelectors.selectPackDeckCover);\n  const isLoading = useSelector(cardsSelectors.selectIsLoading);\n  const pack = useSelector(packsSelectors.selectCardPacks).find(\n    pack => pack._id === cardsPackId,\n  );\n\n  const packIsPrivate = pack?.private;\n  const isUserPack: boolean = packUserId === userId;\n\n  const [openTooltip, setOpenTooltip] = useState(false);\n\n  const onAddCardClick = (): void => {\n    setModalOpen({\n      type: modalType.ADD_CARD,\n      data: {\n        cardsPack_id: cardsPackId,\n        question: '',\n        answer: '',\n      } as AddCardType,\n    });\n  };\n  const onUpdatePackClick = (): void => {\n    setModalOpen({\n      type: modalType.UPDATE_PACK,\n      data: {\n        _id: cardsPackId,\n        name: packName,\n        deckCover: packDeckCover,\n        isPrivate: packIsPrivate,\n      } as UpdatePackType,\n    });\n  };\n  const onDeletePackClick = (): void => {\n    setModalOpen({\n      type: modalType.DELETE_PACK,\n      data: {\n        id: cardsPackId,\n        title: packName || '',\n      } as DeleteModalType,\n    });\n  };\n\n  const handleCloseTooltip = (): void => setOpenTooltip(false);\n  const navigateToPacksList = (): void => navigate(-1);\n  const learnPackHandler = (): void => navigate(`/learn/${cardsPackId}`);\n\n  return (\n    <Box style={{ marginBottom: '10px' }}>\n      <Box sx={{ display: 'flex', justifyContent: 'start', alignItems: 'center' }}>\n        <IconButton size=\"small\" onClick={navigateToPacksList}>\n          <KeyboardBackspaceIcon fontSize=\"small\" />\n        </IconButton>\n      </Box>\n      <Box\n        sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}\n      >\n        <Box sx={{ display: 'flex' }}>\n          <Typography variant=\"h6\">{packName}</Typography>\n          {isUserPack && !isLoading && (\n            <CustomTooltip\n              title={\n                <ActionMenu\n                  blocked={!isUserPack || length === 0}\n                  showUpdateModal={onUpdatePackClick}\n                  showDeleteModal={onDeletePackClick}\n                  closeTooltip={handleCloseTooltip}\n                />\n              }\n              open={openTooltip}\n              onClose={handleCloseTooltip}\n              onOpen={() => setOpenTooltip(true)}\n              placement=\"right\"\n            >\n              <IconButton size=\"small\">\n                <InfoOutlinedIcon />\n              </IconButton>\n            </CustomTooltip>\n          )}\n        </Box>\n        {isUserPack ? (\n          <Button\n            variant=\"contained\"\n            onClick={onAddCardClick}\n            disabled={status === 'loading'}\n          >\n            Add new card\n          </Button>\n        ) : (\n          <Button\n            variant=\"contained\"\n            onClick={learnPackHandler}\n            disabled={length === 0 || status === 'loading'}\n          >\n            Learn pack\n          </Button>\n        )}\n      </Box>\n      {packDeckCover && (\n        <Box sx={{ display: 'flex', justifyContent: 'start', alignItems: 'center' }}>\n          <img src={packDeckCover} alt=\"pack cover\" style={{ width: 100, height: 100 }} />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nconst SIZE = 12;\n\nconst CustomTooltip = styled(({ className, ...props }: TooltipProps) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))(({ theme }) => ({\n  [`& .${tooltipClasses.tooltip}`]: {\n    backgroundColor: '#f5f5f9',\n    color: 'rgba(0, 0, 0, 0.87)',\n    fontSize: theme.typography.pxToRem(SIZE),\n    border: '1px solid #dadde9',\n  },\n}));\n","import React, { FC } from 'react';\n\nimport { Box, Stack, Typography } from '@mui/material';\nimport { useSelector } from 'react-redux';\n\nimport { Search } from '../../../components';\nimport { useActions } from '../../../hooks/useActions';\nimport { allCardsActions, cardsSelectors } from '../../../store';\n\nexport const SearchBlock: FC = () => {\n  const { setCardQuestion, setCardAnswer } = useActions(allCardsActions);\n\n  const cardAnswer = useSelector(cardsSelectors.selectCardAnswer);\n  const cardQuestion = useSelector(cardsSelectors.selectCardQuestion);\n\n  const setSearchQuestion = (question: string): void => {\n    setCardQuestion(question);\n  };\n  const setSearchAnswer = (answer: string): void => {\n    setCardAnswer(answer);\n  };\n\n  return (\n    <Stack direction=\"row\" spacing={4} style={{ marginBottom: '30px' }}>\n      <Box>\n        <Typography variant=\"body2\">Search by question:</Typography>\n        <Search title={cardQuestion} setTitle={setSearchQuestion} />\n      </Box>\n      <Box>\n        <Typography variant=\"body2\">Search by answer:</Typography>\n        <Search title={cardAnswer} setTitle={setSearchAnswer} />\n      </Box>\n    </Stack>\n  );\n};\n","import React, { FC } from 'react';\n\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport {\n  IconButton,\n  Rating,\n  Stack,\n  TableCell,\n  TableRow,\n  Typography,\n} from '@mui/material';\nimport { useSelector } from 'react-redux';\n\nimport { UpdateCardType } from '../../../../api';\nimport { modalType } from '../../../../enums/modalType';\nimport { useActions } from '../../../../hooks/useActions';\nimport { allModalActions, profileSelectors } from '../../../../store';\nimport { DeleteModalType } from '../../../../store/slices/modalSlice';\nimport { CardType } from '../../../../types';\n\nexport const CustomCardRow: FC<{ card: CardType }> = ({ card }) => {\n  const { setModalOpen } = useActions(allModalActions);\n\n  const userId = useSelector(profileSelectors.selectProfile)?._id;\n\n  const onUpdateCardClick = (): void => {\n    setModalOpen({\n      type: modalType.UPDATE_CARD,\n      data: {\n        _id: card._id,\n        question: card.question,\n        answer: card.answer,\n        questionImg: card.questionImg,\n        answerImg: card.answerImg,\n      } as UpdateCardType,\n    });\n  };\n\n  const onDeleteCardClick = (): void => {\n    setModalOpen({\n      type: modalType.DELETE_CARD,\n      data: {\n        id: card._id,\n        title: card.question,\n      } as DeleteModalType,\n    });\n  };\n\n  return (\n    <TableRow\n      key={card._id}\n      sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n      hover\n    >\n      <TableCell\n        component=\"th\"\n        scope=\"row\"\n        align=\"left\"\n        style={{ width: '261px', overflowWrap: 'anywhere' }}\n      >\n        {card.questionImg && (\n          <img\n            src={card.questionImg}\n            alt=\"question cover\"\n            style={{ maxWidth: 150, maxHeight: 150 }}\n          />\n        )}\n        {card.question !== '' && card.question !== 'no question' && (\n          <Typography>{card.question}</Typography>\n        )}\n      </TableCell>\n      <TableCell\n        component=\"th\"\n        scope=\"row\"\n        align=\"left\"\n        style={{ width: '261px', overflowWrap: 'anywhere' }}\n      >\n        {card.answerImg && (\n          <img\n            src={card.answerImg}\n            alt=\"answer cover\"\n            style={{ maxWidth: 150, maxHeight: 150 }}\n          />\n        )}\n        {card.answer !== '' && card.answer !== 'no answer' && (\n          <Typography>{card.answer}</Typography>\n        )}\n      </TableCell>\n      <TableCell align=\"left\">{new Date(card.updated).toLocaleString()}</TableCell>\n      <TableCell align=\"left\">\n        <Rating\n          name=\"read-only\"\n          value={card.grade}\n          readOnly\n          size=\"small\"\n          precision={0.5}\n        />\n      </TableCell>\n      {card.user_id === userId && (\n        <TableCell align=\"left\" style={{ width: '70px' }}>\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n            <IconButton aria-label=\"delete\" size=\"small\" onClick={onUpdateCardClick}>\n              <EditIcon fontSize=\"small\" />\n            </IconButton>\n            <IconButton aria-label=\"delete\" size=\"small\" onClick={onDeleteCardClick}>\n              <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n          </Stack>\n        </TableCell>\n      )}\n    </TableRow>\n  );\n};\n","import React, { FC, useState } from 'react';\n\nimport { Box, TableCell, TableHead, TableRow, TableSortLabel } from '@mui/material';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { visuallyHidden } from '@mui/utils';\nimport { useSelector } from 'react-redux';\n\nimport { useActions } from '../../../../hooks/useActions';\nimport { allCardsActions, cardsSelectors, profileSelectors } from '../../../../store';\n\ntype Order = 'asc' | 'desc';\ntype Data = 'grade' | 'updated';\n\nexport const TableHeader: FC = () => {\n  const { setSortCards } = useActions(allCardsActions);\n\n  const [order, setOrder] = useState<Order>('asc');\n  const [orderBy, setOrderBy] = useState<Data>('updated');\n\n  const packUserId = useSelector(cardsSelectors.selectPackUserId);\n  const userId = useSelector(profileSelectors.selectProfile)?._id;\n\n  const sortHandler = (order: Order, orderBy: Data): void => {\n    const direction = order === 'asc' ? 0 : 1;\n    const str = direction + orderBy;\n\n    setOrder(order);\n    setOrderBy(orderBy);\n    setSortCards(str);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell align=\"left\" style={{ minWidth: '261px', maxWidth: '268px' }}>\n          Question\n        </TableCell>\n        <TableCell align=\"left\" style={{ minWidth: '261px', maxWidth: '268px' }}>\n          Answer\n        </TableCell>\n        <TableCell align=\"left\" style={{ width: '150px' }}>\n          <TableSortLabel\n            active={orderBy === 'updated'}\n            direction={orderBy === 'updated' ? order : 'asc'}\n            onClick={() => sortHandler(order === 'asc' ? 'desc' : 'asc', 'updated')}\n          >\n            Last Updated\n            {orderBy === 'updated' ? (\n              <Box component=\"span\" sx={visuallyHidden}>\n                {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n              </Box>\n            ) : null}\n          </TableSortLabel>\n        </TableCell>\n        <TableCell align=\"left\" style={{ width: '100px' }}>\n          <TableSortLabel\n            active={orderBy === 'grade'}\n            direction={orderBy === 'grade' ? order : 'asc'}\n            onClick={() => sortHandler(order === 'asc' ? 'desc' : 'asc', 'grade')}\n          >\n            Grade\n            {orderBy === 'grade' ? (\n              <Box component=\"span\" sx={visuallyHidden}>\n                {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n              </Box>\n            ) : null}\n          </TableSortLabel>\n        </TableCell>\n        {userId === packUserId && (\n          <TableCell align=\"left\" style={{ minWidth: '68px', maxWidth: '68px' }}>\n            Actions\n          </TableCell>\n        )}\n      </TableRow>\n    </TableHead>\n  );\n};\n","import React, { ChangeEvent, FC, MouseEvent } from 'react';\n\nimport {\n  Box,\n  Paper,\n  Table,\n  TableBody,\n  TableContainer,\n  TablePagination,\n  Typography,\n} from '@mui/material';\nimport { useSelector } from 'react-redux';\n\nimport { useActions } from '../../../hooks/useActions';\nimport { allCardsActions, cardsSelectors } from '../../../store';\n\nimport { CustomCardRow } from './CustomCardRow/CustomCardRow';\nimport { TableHeader } from './TableHeader/TableHeader';\n\nconst FIVE_CARDS_PER_PAGE = 5;\nconst TEN_CARDS_PER_PAGE = 10;\nconst TWENTY_CARDS_PER_PAGE = 20;\n\nexport const TableBlock: FC<{ length: number }> = ({ length }) => {\n  const { setCurrentPageCards, setPageCountCards } = useActions(allCardsActions);\n\n  const page = useSelector(cardsSelectors.selectPage);\n  const pageCount = useSelector(cardsSelectors.selectPageCount);\n  const cardsTotalCount = useSelector(cardsSelectors.selectCardsTotalCount);\n  const isLoading = useSelector(cardsSelectors.selectIsLoading);\n  const cards = useSelector(cardsSelectors.selectCards);\n\n  const handleChangePage = (\n    event: MouseEvent<HTMLButtonElement> | null,\n    page: number,\n  ): void => {\n    const currentPage = page + 1;\n\n    setCurrentPageCards(currentPage);\n  };\n  const handleChangeRowsPerPage = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ): void => {\n    setPageCountCards(+event.target.value);\n  };\n\n  return (\n    <TableContainer component={Paper} style={{ overflowX: 'scroll' }}>\n      <Table style={{ minWidth: '900px' }}>\n        <TableHeader />\n        {length !== 0 && (\n          <TableBody>\n            {cards.map(c => (\n              <CustomCardRow key={c._id} card={c} />\n            ))}\n          </TableBody>\n        )}\n      </Table>\n      {length !== 0 && (\n        <TablePagination\n          rowsPerPageOptions={[\n            FIVE_CARDS_PER_PAGE,\n            TEN_CARDS_PER_PAGE,\n            TWENTY_CARDS_PER_PAGE,\n          ]}\n          component=\"div\"\n          count={cardsTotalCount}\n          rowsPerPage={pageCount}\n          page={page - 1}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      )}\n      {length === 0 && !isLoading && (\n        <Box\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            height: '40vh',\n          }}\n        >\n          <Typography style={{ opacity: '0.6' }}>\n            This pack is empty. Click add new card to fill this pack\n          </Typography>\n        </Box>\n      )}\n    </TableContainer>\n  );\n};\n","import React, { FC, useEffect } from 'react';\n\nimport { Box, CircularProgress } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { useActions } from '../../hooks/useActions';\nimport { allCardsActions, cardsSelectors } from '../../store';\n\nimport { CardsListHeader } from './CardsListHeader/CardsListHeader';\nimport { SearchBlock } from './SearchBlock/SearchBlock';\nimport { TableBlock } from './TableBlock/TableBlock';\n\nconst CardsList: FC = () => {\n  const { getCards, removeCardsData, setCardsPackId } = useActions(allCardsActions);\n\n  const cards = useSelector(cardsSelectors.selectCards);\n  const page = useSelector(cardsSelectors.selectPage);\n  const pageCount = useSelector(cardsSelectors.selectPageCount);\n  const sortCards = useSelector(cardsSelectors.selectSortCards);\n  const cardAnswer = useSelector(cardsSelectors.selectCardAnswer);\n  const cardQuestion = useSelector(cardsSelectors.selectCardQuestion);\n  const cardsPack_id = useSelector(cardsSelectors.selectCardsPack_id);\n\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    if (!id) return;\n    if (cardsPack_id) return;\n    setCardsPackId(id);\n\n    return () => {\n      removeCardsData();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (id != null) {\n      getCards(id);\n    }\n  }, [page, pageCount, sortCards, cardAnswer, cardQuestion]);\n\n  if (!id) {\n    return (\n      <div style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  return (\n    <Box style={{ width: '100%' }}>\n      <CardsListHeader cardsPackId={id} length={cards.length} />\n      <SearchBlock />\n      <TableBlock length={cards.length} />\n    </Box>\n  );\n};\n\nexport default CardsList;\n"],"names":["ActionMenu","blocked","showUpdateModal","showDeleteModal","closeTooltip","navigate","useNavigate","cardsPack_id","useSelector","cardsSelectors","Stack","direction","alignItems","justifyContent","spacing","IconButton","size","onClick","disabled","School","fontSize","Edit","Delete","CardsListHeader","cardsPackId","length","setModalOpen","useActions","allModalActions","packUserId","userId","profileSelectors","_id","packName","status","appSelectors","packDeckCover","isLoading","pack","packsSelectors","find","packIsPrivate","private","isUserPack","useState","openTooltip","setOpenTooltip","handleCloseTooltip","Box","style","marginBottom","sx","display","KeyboardBackspace","Typography","variant","CustomTooltip","title","type","modalType","data","name","deckCover","isPrivate","id","open","onClose","onOpen","placement","InfoOutlined","Button","question","answer","src","alt","width","height","styled","className","props","Tooltip","classes","popper","theme","tooltipClasses","backgroundColor","color","typography","pxToRem","border","SearchBlock","allCardsActions","setCardQuestion","setCardAnswer","cardAnswer","cardQuestion","setTitle","CustomCardRow","card","TableRow","hover","TableCell","component","scope","align","overflowWrap","questionImg","maxWidth","maxHeight","answerImg","Date","updated","toLocaleString","Rating","value","grade","readOnly","precision","user_id","TableHeader","setSortCards","order","setOrder","orderBy","setOrderBy","sortHandler","str","TableHead","minWidth","TableSortLabel","active","visuallyHidden","TableBlock","setCurrentPageCards","setPageCountCards","page","pageCount","cardsTotalCount","cards","TableContainer","Paper","overflowX","Table","TableBody","map","c","TablePagination","rowsPerPageOptions","count","rowsPerPage","onPageChange","event","onRowsPerPageChange","target","opacity","getCards","removeCardsData","setCardsPackId","sortCards","useParams","useEffect","position","top","textAlign","CircularProgress"],"sourceRoot":""}